name: "Run Apex Tests 🚇"
description: "Runs Apex Tests in target Salesforce org, sends Slack alerts & generates results report"

inputs:
  target-org-alias:
    required: true
    description: "Locally authenticated Salesforce org alias"
  class-names:
    required: false
    description: "Apex Test class names separated by colon character"
  slack-webhook-url:
    required: false
    description: "Slack Webhook URL to post test results to"

outputs:
  success:
    description: "Boolean flag that reflects whether the Apex Tests passed or failed"
    value: ${{ steps.parse-apex-tests-results.outputs.success }}

runs:
  using: "composite"
  steps:
    - name: 'Invoke Apex Tests'
      continue-on-error: true
      shell: bash
      run: |
        # Default boolean flag value
        echo "success=false" >> $GITHUB_OUTPUT
        
        # Create temporary flags directory
        flagsDir=$(mktemp -d) && trap 'rm -rf $flagsDir' EXIT
        
        # Parse Apex Test class names if set;
        apexClassNames="${{ inputs.class-names }}"
        apexClassNames="${apexClassNames//[[:space:]]/}"
        if [ -n "$apexClassNames" ]; then
          touch "$flagsDir/class-names"
          IFS=':' # Set colon as the field separator
          for item in ${apexClassNames}; do
            echo "$item" >> "$flagsDir/class-names"
          done
        fi
        
        # Invoke Apex Tests saving results in a dedicated folder
        sf apex run test \
          --target-org "${{ inputs.target-org-alias }}" \
          --flags-dir "$flagsDir" \
          --code-coverage \
          --output-dir "testresults" \
          --wait 30 \
          --concise
    - name: 'Parse Apex Test Results'
      id: parse-apex-tests-results
      shell: bash
      run: |
        apexTestResultsAsJson="$(bash ./scripts/util/parse_apex_test_results.sh "testresults")"
        echo "success=$(echo "$apexTestResultsAsJson" | jq -r '.success')" >> $GITHUB_OUTPUT
        echo "apexTestResultsAsBase64=$(echo $apexTestResultsAsJson | base64 -w 0)" >> $GITHUB_OUTPUT
    - name: 'Send Slack Alert'
      if: ${{ inputs.slack-webhook-url != '' }}
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ inputs.slack-webhook-url }}
        webhook-type: incoming-webhook
        payload: |
          {
            "attachments": [
              {
                "color": "${{ steps.parse-apex-tests-results.outputs.success == 'true' && 'good' || 'danger' }}",
                "text": "Apex Tests ${{ steps.parse-apex-tests-results.outputs.success == 'true' && '_passed_' || '🔻 *failed* 🔻' }} in *${{ inputs.target-org-alias }}* Salesforce org. \n See <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow Run> for more details.",
                "mrkdwn_in": ["text"]
              }
            ]
          }
    - name: 'Create Report & Exit'
      shell: bash
      run: |
        apexTestResultsAsJson="$(echo "${{ steps.parse-apex-tests-results.outputs.apexTestResultsAsBase64 }}" | base64 -d)"
        targetOrgAlias="${{ inputs.target-org-alias }}"
        
        success=$(echo "$apexTestResultsAsJson" | jq -r '.success')
        testRunId=$(echo "$apexTestResultsAsJson" | jq -r '.testRunId')
        outcome=$(echo "$apexTestResultsAsJson" | jq -r '.outcome')
        outcomeColor=$(echo "$apexTestResultsAsJson" | jq -r '.outcomeColor')
        total=$(echo "$apexTestResultsAsJson" | jq -r '.total')
        passing=$(echo "$apexTestResultsAsJson" | jq -r '.passing')
        failing=$(echo "$apexTestResultsAsJson" | jq -r '.failing')
        instanceUrl=$(sf org display --json --target-org "$targetOrgAlias" | jq -r '.result.instanceUrl')
        
        {
          echo "### Apex Test Results 🚀"
          echo
          echo "**$instanceUrl** 🔗"
          echo
          echo "![Apex Tests](https://img.shields.io/badge/Apex%20Tests-$outcome-$outcomeColor)"
          echo
          echo "**Test Run ID**: \`$testRunId\`"
          echo
          echo "| Passing ✅ | Failing ❌ | Total |"
          echo "| --- | --- | --- |"
          echo "| $passing | $failing | $total |"
          echo
        } >> $GITHUB_STEP_SUMMARY
        
        if [ "$success" != "true" ]; then
          # Collect failed Apex Tests
          
          failedTests=$(echo "$apexTestResultsAsJson" | jq -r '.failedTests')
          echo "_See failures below:_" >> $GITHUB_STEP_SUMMARY
          echo "$failedTests" | jq -c '.[]' | while read -r apexTest; do
            name=$(echo "$apexTest" | jq -r '.name')
            errorMessage=$(echo "$apexTest" | jq -r '.errorMessage')
            stackTrace=$(echo "$apexTest" | jq -r '.stackTrace')
            {
              echo '```'
              echo "$name 🔻"
              echo "$errorMessage"
              echo "$stackTrace"
              echo '```'
            } >> $GITHUB_STEP_SUMMARY
          done
          
          exit 1
        else
          # Append success image
          
          IMAGES=(
          "https://i.giphy.com/M0ZoXrSPttN6czwKnx.webp"
          "https://i.giphy.com/OlNDlH5bAGMncqVFua.webp"
          "https://i.giphy.com/Ov09jGgEThFKpxZ9eC.webp"
          "https://i.giphy.com/aPy1iDreYN5DIVtoMk.webp"
          "https://i.giphy.com/Yu3CQVzP8oSOemmKqQ.webp"
          "https://i.giphy.com/vOsRhrnqdyFnPp2OrG.webp"
          "https://i.giphy.com/eZQVUNYA00hItBCHNq.webp"
          )
          RANDOM_IMAGE=${IMAGES[$RANDOM % ${#IMAGES[@]}]}
          echo "![Img]($RANDOM_IMAGE \"Img\")" >> $GITHUB_STEP_SUMMARY
        
          exit 0
        fi
