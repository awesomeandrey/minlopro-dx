<apex:page controller="GoogleMapsPocController">
    <!--If a Visualforce page contains an Aura component, you canâ€™t render the Visualforce page as a PDF!-->

    <!--Includes the Lightning Components for Visualforce JavaScript library, lightning.out.js, from the correct Salesforce domain-->
    <apex:includeLightning />
    <!--Import the Design System style sheet-->
    <apex:slds />

    <!--REQUIRED SLDS WRAPPER-->
    <div class="slds-scope">
        <div class="slds-grid slds-gutters slds-p-around_small">
            <div id="map-region" class="slds-col slds-size_6-of-12"></div>
            <div id="panel-region" class="slds-col slds-size_6-of-12"></div>
        </div>
    </div>

    <script>
        // Dynamically import Google Maps API;
        ((g) => {
            let h,
                a,
                k,
                p = 'The Google Maps JavaScript API',
                c = 'google',
                l = 'importLibrary',
                q = '__ib__',
                m = document,
                b = window;
            b = b[c] || (b[c] = {});
            let d = b.maps || (b.maps = {}),
                r = new Set(),
                e = new URLSearchParams(),
                u = () =>
                    h ||
                    (h = new Promise(async (f, n) => {
                        await (a = m.createElement('script'));
                        e.set('libraries', [...r] + '');
                        for (k in g)
                            e.set(
                                k.replace(/[A-Z]/g, (t) => '_' + t[0].toLowerCase()),
                                g[k]
                            );
                        e.set('callback', c + '.maps.' + q);
                        a.src = `https://maps.${c}apis.com/maps/api/js?` + e;
                        d[q] = f;
                        a.onerror = () => (h = n(Error(p + ' could not load.')));
                        a.nonce = m.querySelector('script[nonce]')?.nonce || '';
                        m.head.append(a);
                    }));
            d[l]
                ? console.warn(p + ' only loads once. Ignoring:', g)
                : (d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)));
        })({
            key: '{!apiKey}'
        });
        // Render Map upon page load;
        window.addEventListener('load', async (event) => {
            // Fetch API libraries;
            await google.maps.importLibrary('maps');
            await google.maps.importLibrary('marker');
            await google.maps.importLibrary('geometry');
            await google.maps.importLibrary('geocoding');
            // Embed custom Aura / LWC components;
            $Lightning.use('c:GoogleMapsApiExt', function (_) {
                let callback = (component, status, errorMessage) => {
                    if (!!errorMessage) {
                        console.log('Could not create component >', status, errorMessage);
                    }
                };
                $Lightning.createComponent(
                    'c:gMap',
                    { googleApiLib: google.maps },
                    'map-region',
                    callback
                );
                $Lightning.createComponent('c:gPanel', {}, 'panel-region', callback);
            });
        });
    </script>
</apex:page>
